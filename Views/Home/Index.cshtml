@model CertificateInfoViewModel
@{
    ViewData["Title"] = "Azure App Service Certificate Manager";
}

<div class="container">
    <h1 class="display-4">Azure App Service Certificate Manager</h1>
    <p class="lead">This page displays certificates loaded via WEBSITE_LOAD_CERTIFICATES and allows testing client certificate authentication.</p>
    
    <!-- Test URL Configuration Display -->
    <div class="row mb-3">
        <div class="col-md-12">
            @if (!string.IsNullOrEmpty(Model.TestUrl))
            {
                <div class="alert alert-info">
                    <h5>üîß Test Configuration</h5>
                    <p><strong>Test URL:</strong> <code>@Model.TestUrl</code></p>
                    <small>Configure this URL using the <code>ClientCertificateTestUrl</code> application setting.</small>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    <h5>‚ö†Ô∏è Test Configuration Missing</h5>
                    <p>No test URL configured. Set the <code>ClientCertificateTestUrl</code> application setting to enable certificate testing.</p>
                    <p><strong>Example values:</strong></p>
                    <ul>
                        <li><code>https://httpbin.org/get</code> - Basic HTTP testing</li>
                        <li><code>https://client.badssl.com/</code> - Client certificate testing</li>
                    </ul>
                </div>
            }
        </div>
    </div>
    
    <!-- Test Results Section -->
    @if (!string.IsNullOrEmpty(Model.TestResult) || !string.IsNullOrEmpty(Model.TestError))
    {
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3>üß™ Client Certificate Test Results</h3>
                    </div>
                    <div class="card-body">
                        @if (Model.TestSuccessful && !string.IsNullOrEmpty(Model.TestResult))
                        {
                            <div class="alert alert-success">
                                <h5>‚úÖ Test Successful</h5>
                                <pre style="white-space: pre-wrap; margin-bottom: 0; font-size: 0.9em;">@Model.TestResult</pre>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.TestError))
                        {
                            <div class="alert alert-danger">
                                <h5>‚ùå Test Failed</h5>
                                <pre style="white-space: pre-wrap; margin-bottom: 0; font-size: 0.9em;">@Model.TestError</pre>
                            </div>
                        }
                        @if (!Model.TestSuccessful && !string.IsNullOrEmpty(Model.TestResult))
                        {
                            <div class="alert alert-warning">
                                <h5>‚ö†Ô∏è Test Completed with Issues</h5>
                                <pre style="white-space: pre-wrap; margin-bottom: 0; font-size: 0.9em;">@Model.TestResult</pre>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Loaded Certificates Section -->
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h3>üìã Loaded Certificates (@Model.LoadedCertificates.Count found)</h3>
                    <small class="text-muted">Certificates available in the certificate stores (loaded via WEBSITE_LOAD_CERTIFICATES)</small>
                </div>
                <div class="card-body">
                    @if (Model.LoadedCertificates.Any())
                    {
                        <!-- Summary stats -->
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <div class="alert alert-light">
                                    <strong>Summary:</strong>
                                    @Model.LoadedCertificates.Count total certificates,
                                    @Model.LoadedCertificates.Count(c => c.HasPrivateKey) with private keys,
                                    @Model.LoadedCertificates.Count(c => c.HasClientAuthenticationEKU) with Client Authentication EKU,
                                    @Model.LoadedCertificates.Count(c => c.IsValid) currently valid
                                </div>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Subject</th>
                                        <th>Thumbprint</th>
                                        <th>Valid Until</th>
                                        <th>Private Key</th>
                                        <th>Client Auth EKU</th>
                                        <th>Store</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var cert in Model.LoadedCertificates)
                                    {
                                        <tr class="@(cert.IsValid ? "" : "table-warning")">
                                            <td>
                                                <strong>@(cert.Subject.Length > 50 ? cert.Subject.Substring(0, 50) + "..." : cert.Subject)</strong>
                                                @if (!string.IsNullOrEmpty(cert.FriendlyName))
                                                {
                                                    <br><small class="text-muted">@cert.FriendlyName</small>
                                                }
                                            </td>
                                            <td><code style="font-size: 0.8em;">@cert.Thumbprint.Substring(0, 12)...</code></td>
                                            <td>
                                                @cert.NotAfter.ToString("yyyy-MM-dd")
                                                @if (!cert.IsValid)
                                                {
                                                    <br><small class="text-danger">‚ö†Ô∏è Expired</small>
                                                }
                                            </td>
                                            <td>
                                                @if (cert.HasPrivateKey)
                                                {
                                                    <span class="badge bg-success">‚úì Yes</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">‚úó No</span>
                                                }
                                            </td>
                                            <td>
                                                @if (cert.HasClientAuthenticationEKU)
                                                {
                                                    <span class="badge bg-success">‚úì Yes</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">‚úó No</span>
                                                }
                                            </td>
                                            <td>
                                                <small>@cert.StoreName<br>(@cert.StoreLocation)</small>
                                            </td>
                                            <td>
                                                <div class="btn-group-vertical" style="width: 100%;">
                                                    <button type="button" class="btn btn-sm btn-outline-info mb-1" onclick="showCertDetails('@cert.Thumbprint')">
                                                        Details
                                                    </button>
                                                
                                                    @if (cert.HasPrivateKey && !string.IsNullOrEmpty(Model.TestUrl))
                                                    {
                                                        <form method="post" asp-action="TestClientCertificate" style="display: inline;">
                                                            <input type="hidden" name="thumbprint" value="@cert.Thumbprint" />
                                                            @if (cert.HasClientAuthenticationEKU)
                                                            {
                                                                <button type="submit" class="btn btn-sm btn-success" title="Test with Client Authentication EKU">
                                                                    üß™ Test
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button type="submit" class="btn btn-sm btn-warning" title="Test without Client Authentication EKU - may fail">
                                                                    ‚ö†Ô∏è Test
                                                                </button>
                                                            }
                                                        </form>
                                                    }
                                                    else if (!cert.HasPrivateKey)
                                                    {
                                                        <button type="button" class="btn btn-sm btn-secondary" disabled title="No private key available">
                                                            üîí No Key
                                                        </button>
                                                    }
                                                    else if (string.IsNullOrEmpty(Model.TestUrl))
                                                    {
                                                        <button type="button" class="btn btn-sm btn-secondary" disabled title="Test URL not configured">
                                                            üîß No URL
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="mt-3">
                            <h6>Legend:</h6>
                            <ul class="list-unstyled">
                                <li><span class="badge bg-success">üß™ Test</span> - Certificate has Client Authentication EKU and private key</li>
                                <li><span class="badge bg-warning">‚ö†Ô∏è Test</span> - Certificate has private key but NO Client Authentication EKU (test to see behavior)</li>
                                <li><span class="badge bg-secondary">üîí No Key</span> - Certificate has no accessible private key</li>
                                <li><span class="badge bg-secondary">üîß No URL</span> - Test URL not configured</li>
                            </ul>
                        </div>

                        <!-- Certificate Details Modals -->
                        @foreach (var cert in Model.LoadedCertificates)
                        {
                            <div class="modal fade" id="certModal-@cert.Thumbprint" tabindex="-1">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Certificate Details</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <p><strong>Subject:</strong><br><code style="font-size: 0.85em;">@cert.Subject</code></p>
                                                    <p><strong>Issuer:</strong><br><code style="font-size: 0.85em;">@cert.Issuer</code></p>
                                                    <p><strong>Serial Number:</strong><br><code>@cert.SerialNumber</code></p>
                                                    <p><strong>Thumbprint:</strong><br><code>@cert.Thumbprint</code></p>
                                                </div>
                                                <div class="col-md-6">
                                                    <p><strong>Valid From:</strong> @cert.NotBefore.ToString("yyyy-MM-dd HH:mm:ss")</p>
                                                    <p><strong>Valid Until:</strong> @cert.NotAfter.ToString("yyyy-MM-dd HH:mm:ss")</p>
                                                    <p><strong>Store:</strong> @cert.StoreName (@cert.StoreLocation)</p>
                                                    <p><strong>Has Private Key:</strong> @(cert.HasPrivateKey ? "Yes" : "No")</p>
                                                    <p><strong>Friendly Name:</strong> @(string.IsNullOrEmpty(cert.FriendlyName) ? "None" : cert.FriendlyName)</p>
                                                </div>
                                            </div>
                                            
                                            @if (cert.ExtendedKeyUsages.Any())
                                            {
                                                <h6>Extended Key Usages:</h6>
                                                <ul>
                                                    @foreach (var eku in cert.ExtendedKeyUsages)
                                                    {
                                                        <li>@eku @if(eku.Contains("Client Authentication")) {<span class="badge bg-success">Client Auth</span>}</li>
                                                    }
                                                </ul>
                                            }
                                            else
                                            {
                                                <div class="alert alert-warning">
                                                    <strong>No Extended Key Usages found</strong> - This certificate may not be suitable for client authentication.
                                                </div>
                                            }
                                            
                                            @if (cert.KeyUsages.Any())
                                            {
                                                <h6>Key Usages:</h6>
                                                <ul>
                                                    @foreach (var usage in cert.KeyUsages)
                                                    {
                                                        <li>@usage</li>
                                                    }
                                                </ul>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <h4>No Certificates Found</h4>
                            <p>No certificates were found in the certificate stores. This could mean:</p>
                            <ul>
                                <li>No certificates have been loaded via WEBSITE_LOAD_CERTIFICATES</li>
                                <li>The application doesn't have permission to access the certificate stores</li>
                                <li>You're running locally without certificates installed</li>
                            </ul>
                            <p><strong>For local testing, you can:</strong></p>
                            <ol>
                                <li>Install some certificates in your Windows certificate store (certmgr.msc)</li>
                                <li>Use self-signed certificates for testing</li>
                                <li>Import certificates from your browser or other applications</li>
                            </ol>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Client Certificate from Request Section -->
    @if (Model.HasClientCertificate && Model.ClientCertificate != null)
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <h3>üîí Client Certificate from HTTP Request</h3>
                        <small class="text-muted">Certificate presented with this HTTP request</small>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-success" role="alert">
                            <i class="bi bi-check-circle-fill"></i> Client certificate detected in request!
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Subject:</strong><br />
                                <code>@Model.ClientCertificate.Subject</code></p>
                                
                                <p><strong>Issuer:</strong><br />
                                <code>@Model.ClientCertificate.Issuer</code></p>
                                
                                <p><strong>Thumbprint:</strong><br />
                                <code>@Model.ClientCertificate.Thumbprint</code></p>
                                
                                <p><strong>Serial Number:</strong><br />
                                <code>@Model.ClientCertificate.SerialNumber</code></p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Valid From:</strong><br />
                                @Model.ClientCertificate.NotBefore.ToString("yyyy-MM-dd HH:mm:ss UTC")</p>
                                
                                <p><strong>Valid Until:</strong><br />
                                @Model.ClientCertificate.NotAfter.ToString("yyyy-MM-dd HH:mm:ss UTC")</p>
                                
                                <p><strong>Version:</strong> @Model.ClientCertificate.Version</p>
                                
                                <p><strong>Signature Algorithm:</strong> @Model.ClientCertificate.SignatureAlgorithm</p>
                                
                                <p><strong>Public Key Algorithm:</strong> @Model.ClientCertificate.PublicKeyAlgorithm</p>
                                
                                <p><strong>Key Size:</strong> @Model.ClientCertificate.KeySize bits</p>
                            </div>
                        </div>

                        @if (Model.ClientCertificate.ExtendedKeyUsages.Any())
                        {
                            <div class="mt-3">
                                <h5>Extended Key Usages:</h5>
                                <ul>
                                    @foreach (var eku in Model.ClientCertificate.ExtendedKeyUsages)
                                    {
                                        <li>@eku</li>
                                    }
                                </ul>
                            </div>
                        }

                        <!-- Certificate validation status -->
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <h5>Date Validity</h5>
                                @if (Model.ClientCertificate.IsValid)
                                {
                                    <div class="alert alert-success">
                                        <i class="bi bi-check-circle"></i> Certificate is currently valid
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-danger">
                                        <i class="bi bi-x-circle"></i> Certificate is expired or not yet valid
                                    </div>
                                }
                            </div>
                            <div class="col-md-6">
                                <h5>Certificate Chain Validation</h5>
                                @if (!string.IsNullOrEmpty(Model.ClientCertificate.ChainValidationError))
                                {
                                    <div class="alert alert-warning">
                                        <i class="bi bi-exclamation-triangle"></i> Chain validation error: @Model.ClientCertificate.ChainValidationError
                                    </div>
                                }
                                else if (Model.ClientCertificate.ChainIsValid)
                                {
                                    <div class="alert alert-success">
                                        <i class="bi bi-check-circle"></i> Certificate chain is valid
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-danger">
                                        <i class="bi bi-x-circle"></i> Certificate chain validation failed
                                        @if (Model.ClientCertificate.ChainErrors.Any())
                                        {
                                            <ul class="mt-2 mb-0">
                                                @foreach (var error in Model.ClientCertificate.ChainErrors)
                                                {
                                                    <li>@error</li>
                                                }
                                            </ul>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <h3>üîí Client Certificate from HTTP Request</h3>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info" role="alert">
                            <h4 class="alert-heading">No Client Certificate in Request</h4>
                            <p>No client certificate was presented with this HTTP request. The certificates shown above are loaded from the certificate store via WEBSITE_LOAD_CERTIFICATES.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Configuration Help -->
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h3>‚öôÔ∏è Configuration Help</h3>
                </div>
                <div class="card-body">
                    <h5>Application Settings Required:</h5>
                    <ul>
                        <li><code>ClientCertificateTestUrl</code> - URL to test client certificates against (currently: <code>@(Model.TestUrl ?? "Not configured")</code>)</li>
                        <li><code>WEBSITE_LOAD_CERTIFICATES</code> - Thumbprints to load or * for all certificates</li>
                    </ul>

                    <h5>To load certificates with WEBSITE_LOAD_CERTIFICATES:</h5>
                    <ol>
                        <li>Upload your certificates to your App Service (Settings ‚Üí TLS/SSL settings ‚Üí Private Key Certificates)</li>
                        <li>Add the <code>WEBSITE_LOAD_CERTIFICATES</code> application setting with:
                            <ul>
                                <li>Specific thumbprints: <code>thumbprint1,thumbprint2</code></li>
                                <li>All certificates: <code>*</code></li>
                            </ul>
                        </li>
                        <li>Restart your App Service</li>
                    </ol>
                    
                    <h5>To enable client certificate authentication:</h5>
                    <ol>
                        <li>Go to your App Service ‚Üí Configuration ‚Üí General settings</li>
                        <li>Set <strong>Client certificate mode</strong> to <strong>Allow</strong> or <strong>Require</strong></li>
                        <li>Save and restart your app</li>
                    </ol>

                    <h5>Test URL Examples:</h5>
                    <ul>
                        <li><code>https://httpbin.org/get</code> - Simple HTTP testing service (doesn't require client certs)</li>
                        <li><code>https://your-other-app.azurewebsites.net/api/secure</code> - Your own API requiring client certificates</li>
                        <li><code>https://client.badssl.com/</code> - BadSSL client certificate test site</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function showCertDetails(thumbprint) {
    var modalId = '#certModal-' + thumbprint;
    var modal = new bootstrap.Modal(document.querySelector(modalId));
    modal.show();
}
</script>