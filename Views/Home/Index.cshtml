@model CertificateInfoViewModel
@{
    ViewData["Title"] = "Incoming Client Certificate Validation";
}

<div class="container">
    <div class="row mb-3">
        <div class="col-md-12">
            <h1 class="display-5">üì• Incoming Client Certificate Validation</h1>
            <p class="lead">Validate and analyze client certificates presented with HTTP requests to this Azure App Service.</p>
        </div>
    </div>
    
    <!-- Certificate Validation Results Section -->
    <div class="row mb-4">
        <div class="col-md-12">
            @if (Model.ValidationResult.HasCertificate)
            {
                <div class="card border-@GetValidationStatusColor(Model.ValidationResult.OverallStatus)">
                    <div class="card-header bg-@GetValidationStatusColor(Model.ValidationResult.OverallStatus) text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3 class="mb-0">üîí Client Certificate Validation Results</h3>
                            <span class="badge badge-light text-dark fs-6">@GetValidationStatusText(Model.ValidationResult.OverallStatus)</span>
                        </div>
                        <small class="opacity-75">@Model.ValidationResult.Subject</small>
                    </div>
                    <div class="card-body">
                        <!-- Quick Status Grid -->
                        <div class="row mb-4">
                            <div class="col-md-3 col-sm-6 mb-2">
                                <div class="text-center p-3 border rounded">
                                    <div class="h4 mb-1">@(Model.ValidationResult.IsDateValid ? "‚úÖ" : "‚ùå")</div>
                                    <div class="small text-muted">Date Valid</div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6 mb-2">
                                <div class="text-center p-3 border rounded">
                                    <div class="h4 mb-1">@(Model.ValidationResult.IsChainValid ? "‚úÖ" : "‚ö†Ô∏è")</div>
                                    <div class="small text-muted">Chain Valid</div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6 mb-2">
                                <div class="text-center p-3 border rounded">
                                    <div class="h4 mb-1">@(Model.ValidationResult.HasClientAuthEKU ? "‚úÖ" : "‚ùå")</div>
                                    <div class="small text-muted">Client Auth EKU</div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6 mb-2">
                                <div class="text-center p-3 border rounded">
                                    <div class="h4 mb-1">@(Model.ValidationResult.IsRevocationValid ? "‚úÖ" : "‚ö†Ô∏è")</div>
                                    <div class="small text-muted">Revocation OK</div>
                                </div>
                            </div>
                        </div>

                        <!-- Certificate Details -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h5>üìã Certificate Information</h5>
                                <table class="table table-sm">
                                    <tr><td><strong>Subject:</strong></td><td><code class="small">@Model.ValidationResult.Subject</code></td></tr>
                                    <tr><td><strong>Issuer:</strong></td><td><code class="small">@Model.ValidationResult.Issuer</code></td></tr>
                                    <tr><td><strong>Thumbprint:</strong></td><td><code class="small">@Model.ValidationResult.Thumbprint</code></td></tr>
                                    <tr><td><strong>Valid Period:</strong></td><td>@Model.ValidationResult.NotBefore.ToString("yyyy-MM-dd") to @Model.ValidationResult.NotAfter.ToString("yyyy-MM-dd")</td></tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h5>üîê Cryptographic Details</h5>
                                <table class="table table-sm">
                                    <tr><td><strong>Key Algorithm:</strong></td><td>@Model.ValidationResult.KeyAlgorithm</td></tr>
                                    <tr><td><strong>Key Size:</strong></td><td>@Model.ValidationResult.KeySize bits</td></tr>
                                    <tr><td><strong>Signature Algorithm:</strong></td><td>@Model.ValidationResult.SignatureAlgorithm</td></tr>
                                    <tr><td><strong>Chain Length:</strong></td><td>@Model.ValidationResult.ChainLength elements</td></tr>
                                </table>
                            </div>
                        </div>

                        <!-- Validation Issues -->
                        @if (Model.ValidationResult.ValidationIssues.Any())
                        {
                            <div class="row mb-3">
                                <div class="col-md-12">
                                    <h5>‚ö†Ô∏è Validation Issues (@Model.ValidationResult.CriticalIssuesCount critical, @Model.ValidationResult.WarningIssuesCount warnings)</h5>
                                    <div class="validation-issues">
                                        @foreach (var issue in Model.ValidationResult.ValidationIssues.OrderByDescending(i => i.Severity))
                                        {
                                            <div class="alert alert-@GetIssueSeverityColor(issue.Severity) py-2" role="alert">
                                                <strong>[@issue.Category]</strong> @issue.Message
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success" role="alert">
                                <h5 class="alert-heading">üéâ Perfect Certificate!</h5>
                                <p class="mb-0">No validation issues found. This certificate meets all industry standards for client authentication.</p>
                            </div>
                        }

                        <!-- Extended Details (Collapsible) -->
                        <div class="accordion" id="certificateAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingEKU">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseEKU">
                                        Extended Key Usages
                                    </button>
                                </h2>
                                <div id="collapseEKU" class="accordion-collapse collapse" data-bs-parent="#certificateAccordion">
                                    <div class="accordion-body">
                                        @if (Model.ValidationResult.ExtendedKeyUsages.Any())
                                        {
                                            <div class="d-flex flex-wrap gap-2">
                                                @foreach (var eku in Model.ValidationResult.ExtendedKeyUsages)
                                                {
                                                    <span class="badge bg-@(eku.Contains("Client Authentication") ? "success" : "secondary") fs-6">@eku</span>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-muted">No Extended Key Usages found.</p>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingChain">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseChain">
                                        Certificate Chain (@Model.ValidationResult.ChainLength elements)
                                    </button>
                                </h2>
                                <div id="collapseChain" class="accordion-collapse collapse" data-bs-parent="#certificateAccordion">
                                    <div class="accordion-body">
                                        @if (Model.ValidationResult.ChainElements.Any())
                                        {
                                            @for (int i = 0; i < Model.ValidationResult.ChainElements.Count; i++)
                                            {
                                                var element = Model.ValidationResult.ChainElements[i];
                                                <div class="d-flex align-items-center mb-2">
                                                    <span class="badge bg-@(element.IsRoot ? "primary" : i == 0 ? "success" : "secondary") me-2">
                                                        @(element.IsRoot ? "Root CA" : i == 0 ? "End Entity" : "Intermediate CA")
                                                    </span>
                                                    <small class="text-muted">@element.Subject</small>
                                                </div>
                                                @if (i < Model.ValidationResult.ChainElements.Count - 1)
                                                {
                                                    <div class="text-center text-muted">‚Üì</div>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <p class="text-muted">No chain information available.</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h3 class="mb-0">üîí No Client Certificate Present</h3>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-warning" role="alert">
                            <h4 class="alert-heading">No Client Certificate Detected</h4>
                            <p>No client certificate was provided with this HTTP request. To test incoming certificate validation:</p>
                            <ul class="mb-0">
                                <li>Configure your client (browser/application) to present a client certificate</li>
                                <li>Ensure Azure App Service is configured to accept client certificates</li>
                                <li>Verify the certificate is properly installed in your client</li>
                            </ul>
                        </div>
                        
                        <div class="mt-3">
                            <h5>Azure App Service Configuration</h5>
                            <p>To enable client certificate authentication:</p>
                            <ol>
                                <li>Go to your App Service ‚Üí <strong>Configuration</strong> ‚Üí <strong>General settings</strong></li>
                                <li>Set <strong>Client certificate mode</strong> to <strong>Allow</strong> or <strong>Require</strong></li>
                                <li>Save and restart your app</li>
                            </ol>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Help Section -->
    <div class="row">
        <div class="col-md-12">
            <div class="card bg-light">
                <div class="card-header">
                    <h5 class="mb-0">üí° About Incoming Client Certificate Validation</h5>
                </div>
                <div class="card-body">
                    <p>This page validates client certificates presented by browsers or applications when making requests to your Azure App Service. The validation follows industry standards including:</p>
                    <div class="row">
                        <div class="col-md-6">
                            <ul class="mb-0">
                                <li><strong>RFC 5280</strong> - Certificate path validation</li>
                                <li><strong>Date/Time validity</strong> - NotBefore/NotAfter checks</li>
                                <li><strong>Chain validation</strong> - Full certificate chain verification</li>
                                <li><strong>Revocation checking</strong> - CRL/OCSP validation</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <ul class="mb-0">
                                <li><strong>Key usage validation</strong> - Appropriate key usage flags</li>
                                <li><strong>Extended key usage</strong> - Client Authentication EKU</li>
                                <li><strong>Cryptographic strength</strong> - Modern key sizes and algorithms</li>
                                <li><strong>Critical extensions</strong> - Proper extension handling</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.gap-2 > * {
    margin-right: 0.5rem !important;
    margin-bottom: 0.5rem !important;
}
</style>

@functions {
    private string GetValidationStatusColor(CertificateValidationStatus status)
    {
        return status switch
        {
            CertificateValidationStatus.Valid => "success",
            CertificateValidationStatus.ValidWithWarnings => "warning",
            CertificateValidationStatus.Invalid => "danger",
            CertificateValidationStatus.NoCertificate => "secondary",
            _ => "secondary"
        };
    }

    private string GetValidationStatusText(CertificateValidationStatus status)
    {
        return status switch
        {
            CertificateValidationStatus.Valid => "‚úÖ VALID",
            CertificateValidationStatus.ValidWithWarnings => "‚ö†Ô∏è VALID WITH WARNINGS",
            CertificateValidationStatus.Invalid => "‚ùå INVALID",
            CertificateValidationStatus.NoCertificate => "üìã NO CERTIFICATE",
            _ => "UNKNOWN"
        };
    }

    private string GetIssueSeverityColor(ValidationSeverity severity)
    {
        return severity switch
        {
            ValidationSeverity.Critical => "danger",
            ValidationSeverity.Warning => "warning",
            ValidationSeverity.Info => "info",
            _ => "secondary"
        };
    }
}